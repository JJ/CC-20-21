name: "Comprueba los proyectos por hito"
on:
  pull_request:
    paths:
      - 'proyectos/[1234567].md'

jobs:
  extrae_usuario_repo:
    runs-on: ubuntu-latest
    outputs:
      user: ${{steps.user_repo.outputs.user}}
      repo: ${{steps.user_repo.outputs.repo}}
    steps:
      - name: Extrae URL del repositorio
        uses: JJ/github-pr-contains-action@releases/v2
        with:
          github-token: ${{github.token}}
          filesChanged: 1
      - name: Extrae usuario y nombre del repo
        uses: actions/github-script@v3
        id: user_repo
        env:
            ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const diff = process.env.diff;
            const ghRepoMatch = /github.com\/(\S+)\/(.+?)(:\s+|\))/.exec(diff)
            if  ( ghRepoMatch === null ) {
                core.setFailed("‚ùå There's no repo URL in this diff with required format")
            } else {
                const user = ghRepoMatch[1] // segundo resultado
                const repo = ghRepoMatch[2] // tercer resultado
                console.log( "¬ª Encontrado repo " + repo + " para usuario " + user )
                console.log( "::set-output name=user::" + user )
                console.log( "::set-output name=repo::" + repo )
            }
  comprueba_hito_1:
    runs-on: ubuntu-latest
    needs: extrae_usuario_repo
    env:
      CC_USER: ${{ needs.extrae_usuario_repo.outputs.user }}
      CC_REPO: ${{ needs.extrae_usuario_repo.outputs.repo }}
    steps:
      - name: Comprueba hitos en repo estudiante
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
              const user = process.env.CC_USER
              const repo = process.env.CC_REPO
              console.log( "¬ª Trabajando con el repo " + repo + " para el usuario " + user )
              const milestones = await github.issues.listMilestones( { owner: user, repo: repo } )
              if ( ! milestones.data.length ) {
                  core.setFailed("‚ùå Tiene que haber por lo menos un milestone")
              }
              const minMilestones = 3
              if ( minMilestones && milestones.data.length < minMilestones ) {
                  core.setFailed( "‚ùå Tendr√≠a que haber m√°s de " + minMilestones + " milestone(s)");
              }
              var totalIssues = 0
              var totalClosedIssues = 0
              milestones.data.forEach( async function( milestone ) {
                  totalIssues += milestone.open_issues + milestone.closed_issues
                  totalClosedIssues += milestone.closed_issues
              })
              console.log( "‚úÖ Hay " + totalIssues + " issues en tus milestones y " + totalClosedIssues + " cerrados ")
              if ( ! totalIssues ) {
                  core.setFailed( "‚ùå No hay ning√∫n issue en tus milestones")
              } else if ( ! totalClosedIssues ) {
                  core.setFailed( "‚ùå No hay ning√∫n issue cerrado milestones")
              }

      - name: Busca historias de usuario e issues cerrados
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const user = process.env.CC_USER
            const repo = process.env.CC_REPO
            console.log( "¬ª Analizando repo " + repo + " del usuario üî•" + user )
            const non_paginated_issues = await github.issues.listForRepo.endpoint.merge( { owner: user, repo: repo })
            const issues = await github.paginate( non_paginated_issues )
            const user_stories = issues.filter( issue => issue.labels.filter( label => label.name === "user-stories" ).length > 0 && ( issue.title.includes('HU') || issue.title.includes('US') ) && issue.milestone )
            if ( user_stories.length > 0 ) {
              console.log( " ‚úÖ Hay al menos una historia de usuario " )
            } else {
              core.setFailed( " ‚ùå No hay ninguna historia de usuario en el repo " )
            }

            const closed_issues = issues.filter( issue => issue.state === "closed" )
            closed_issues.forEach( async function( issue ) {
              if ( ! issue.pull_request ) {
                        const query = `query($owner:String!, $name:String!, $issue:Int!) {
                            repository(name: $name , owner: $owner  ) {
                              issue(number: $issue) {
                                timelineItems(itemTypes: CLOSED_EVENT, last: 1) {
                                  nodes {
                                    ... on ClosedEvent {
                                      closer {
                                        __typename
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }`;

                const variables = {
                          owner: user,
                          name: repo,
                          issue: issue.number
                          }
                const result = await github.graphql(query, variables)
                if ( result.repository.issue.timelineItems.nodes[0].closer != null ) {
                            const closingEvent = result.repository.issue.timelineItems.nodes[0].closer.__typename
                            if ( (closingEvent == 'Commit') || (closingEvent == 'PullRequest') ) {
                                console.log(" ‚úÖ El issue " + issue.number + " se cerr√≥ con un " + closingEvent )
                            } else {
                                core.setFailed( "‚ùå El issue " + issue.number + " no se cerr√≥ con un commit o PR")
                            }
                } else {
                  console.log( "‚ùå El issue " + issue.number + " no est√° cerrado aunque aparece en la lista de tales " )
                }
              }
            })
  ops_on_repo:
    runs-on: ubuntu-latest
    needs: extrae_usuario_repo
    outputs:
      container: ${{steps.container.outputs.CONTAINER}}
      orden_tareas: ${{steps.container.outputs.CC_ORDEN_TAREAS}}
    env:
      CC_USER: ${{ needs.extrae_usuario_repo.outputs.user }}
      CC_REPO: ${{ needs.extrae_usuario_repo.outputs.repo }}
    steps:
      - name: Descarga repo usuario y decodifica configuraci√≥n
        uses: actions/checkout@v2
        with:
          repository: '${{env.CC_USER}}/${{env.CC_REPO}}'
      - name: Descarga ysh y ejecuta
        id: container
        run: |
          sudo curl -s -L https://raw.githubusercontent.com/azohra/yaml.sh/v0.2.0/ysh --output /usr/bin/ysh
          sudo chmod +x /usr/bin/ysh
          ysh -v
          # Estamos en el repo del estudiante
          curl https://raw.githubusercontent.com/JJ/CC-20-21/master/.github/workflows/procesa_yaml.sh --output procesa_yaml.sh
          chmod +x ./procesa_yaml.sh
          ./procesa_yaml.sh
          if test -f "DOCKER_USER"; then
            echo "‚ù¢ Usuario de Docker alternativo"
            CC_USER=`cat DOCKER_USER`
          fi
          echo "::set-output name=CONTAINER::${CC_USER}/${CC_REPO}"
          echo "CONTAINER=${CC_USER}/${CC_REPO}" >> $GITHUB_ENV
      - name: Filtra hito
        uses: dorny/paths-filter@v2
        id: hito3
        with:
          filters: |
            src:
              - 'proyectos/[345678].md'
      - name: Testea el contenedor
        if: steps.hito3.outputs.src == 'true'
        run: docker run -t -v `pwd`:/app/test ${CONTAINER,,}
      - name: Testea microservicio hito 5
        uses: dorny/paths-filter@v2
        id: hito5
        with:
          filters: |
            src:
              - 'proyectos/[567].md'
      - name: Ejecuta test del microservicio
        if: steps.hito5.outputs.src == 'true'
        run: |
          docker run -t -v `pwd`:/app/test ${CONTAINER,,} sh -c "ls && ${CC_ORDEN_TAREAS} build && ${CC_ORDEN_TAREAS} install && ${CC_ORDEN_TAREAS} test"

  test-ci-status:
    runs-on: ubuntu-latest
    needs: extrae_usuario_repo
    env:
      CC_USER: ${{ needs.extrae_usuario_repo.outputs.user }}
      CC_REPO: ${{ needs.extrae_usuario_repo.outputs.repo }}
    steps:
      - name: Filtra hito
        uses: dorny/paths-filter@v2
        id: hito4
        with:
          filters: |
            src:
              - 'proyectos/[45678].md'
      - name: Comprueba el estado de CI
        if: steps.hito4.outputs.src == 'true'
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const user = process.env.CC_USER // segundo resultado
            const repo = process.env.CC_REPO // tercer resultado
            console.log( "¬ª Analizando repo " + repo + " del usuario üî•" + user )
            const checks_before_pag =
                    await github.checks.listForRef.endpoint.merge(
                        { owner: user,
                          repo: repo,
                          ref: 'HEAD',
                          status: 'completed'
                        })
            const checks = await github.paginate( checks_before_pag)
            console.log( "‚úÖ Hay " + checks.length + " sistemas de CI configurados")

            if ( checks.length < 1 ) {
                    core.setFailed("‚ùå No hay suficientes sistemas de CI configurados")
            }
            const green_checks = checks.filter( check => check.conclusion === "success" )
            if ( !green_checks.length ) {
              core.setFailed("‚ùå No hay al menos un CI que est√© en verde")
            } else {
              console.log( "‚úÖ Hay " + green_checks.length + " que pasa(n) los tests correctamente" )
            }
            const travis_checks_green = green_checks.filter( check => check.app.slug === "travis-ci" )

            if ( travis_checks_green.length == 0 ) {
              const circle_checks_green = green_checks.filter( check => check.app.slug === "circle-ci" )
              if ( circle_checks_green.length == 0 ) {
                core.setFailed("‚ùå Travis y Circle no est√°n o est√° fallando en este momento")
              }
            } else {
              console.log( "‚úÖ Entre ellos est√° Travis" )
            }
